@using System.Threading
@using System.Threading.Tasks
@using FireSafetyTools.Models.Tools.FireSafety.DesignFire
@model FireSafetyTools.ViewModels.Tools.FireSafety.DesignFire.DesignFireViewModel

@{
    ViewBag.Title = "CreationKit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Design Fire Creation Kit</h2>

<div id="divtable" style="margin-top: 30px">
    <table class="table table-hover">
        <tr style="border-bottom: 1px solid gray">
            <th>#</th>
            <th>Phase</th>
            <th>Duration</th>
            <th>Growth Rate</th>
            <th>Max Effect</th>
            <th>Total Energy</th>
        </tr>
        


        @foreach (var phase in Model.Phases)
        {
            <tr>
                <td>@phase.Id</td>
                <td>@phase.Name</td>
                <td>@phase.Duration s </td>
                <td>@phase.GrowthRateFactor</td>
                <td>@phase.TargetYq kW</td>
                <td>@phase.TotalEnergyReleased MJ</td>
            </tr>
        }

    </table>
</div>





<div class="inline" style="position: relative;">


    <div class="dropup" style="display: inline;" id="PhaseTypeId" Name="PhaseTypeIdId">
        <button id="dropUpMenu" class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            Add a Phase
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownDurationAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownDurationAndGrowthRate }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownDurationAndTargetEffect).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownDurationAndTargetEffect }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownTargetEffectAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownTargetEffectAndGrowthRate }, null)</li>
            <li role="separator" class="divider"></li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.SteadyKnownDuration).Name, "New", "DesignFire", new { id = PhaseType.SteadyKnownDuration }, null)</li>
            <li role="separator" class="divider"></li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownDurationAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownDurationAndGrowthRate }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownDurationAndTargetEffect).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownDurationAndTargetEffect }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownTargetEffectAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownTargetEffectAndGrowthRate }, null)</li>
        </ul>
    </div>

    <div id="xaxis" class="hidden" data-chart="@Model.XAxis"></div>
    <div id="yaxis" class="hidden" data-chart="@Model.YAxis"></div>
    
    @Html.ActionLink("Clear", "ClearTable", "DesignFire", null, new { @class = "btn btn-warning" })
    <button class="btn btn-danger" type="button" style="display: inline">Export</button>

</div>

<div id="myDiv" style="height: 400px;"></div>

<style>
    div.inline {
        margin-top: 30px;
    }

    table {
        padding: 20px;
    }

        table tr {
            
        }

    #divtable {
        height: 500px;
        border-bottom: 1px solid gray;
        border-top: 1px solid gray;
    }
</style>

@section scripts {
    <script src="~/lib/plotly.js-1.21.2/dist/plotly.min.js"></script>
    <script>

        $(document).ready(function () {

            var xAxisData = JSON.parse($("#xaxis").attr("data-chart"));
            var yAxisData = JSON.parse($("#yaxis").attr("data-chart"));


            var trace1 = {
                x: xAxisData,
                y: yAxisData,
                fill: 'tozeroy',
                type: 'scatter'
            };

            var data = [trace1];

            Plotly.newPlot('myDiv', data);

        });

    </script>
}

