@using System.Threading
@using System.Threading.Tasks
@using FireSafetyTools.Models.Tools.FireSafety.DesignFire
@model FireSafetyTools.ViewModels.Tools.FireSafety.DesignFire.DesignFireViewModel

@{
    ViewBag.Title = "CreationKit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Design Fire Creation Kit</h2>

<div id="divtable" style="margin-top: 30px">
    <table class="table table-hover">
        <tr style="border-bottom: 1px solid gray">
            <th>#</th>
            <th>Phase</th>
            <th>Duration</th>
            <th>Growth Rate</th>
            <th>Max Effect</th>
            <th>Total Energy</th>
        </tr>
        


        @foreach (var phase in Model.Phases)
        {
            <tr>
                <td>@phase.Id</td>
                <td>@phase.Name</td>
                <td>@phase.Duration s </td>
                <td>@phase.GrowthRateFactor</td>
                <td>@phase.TargetYq kW</td>
                <td>@phase.TotalEnergyReleased MJ</td>
            </tr>
        }

    </table>
</div>





<div class="inline" style="position: relative;">


    <div class="dropup" style="display: inline;" id="PhaseTypeId" Name="PhaseTypeIdId">
        <button id="dropUpMenu" class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            Add a Phase
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownDurationAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownDurationAndGrowthRate }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownDurationAndTargetEffect).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownDurationAndTargetEffect }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.GrowthKnownTargetEffectAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.GrowthKnownTargetEffectAndGrowthRate }, null)</li>
            <li role="separator" class="divider"></li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.SteadyKnownDuration).Name, "New", "DesignFire", new { id = PhaseType.SteadyKnownDuration }, null)</li>
            <li role="separator" class="divider"></li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownDurationAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownDurationAndGrowthRate }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownDurationAndTargetEffect).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownDurationAndTargetEffect }, null)</li>
            <li>@Html.ActionLink(Model.PhaseTypes.Single(d => d.Id == PhaseType.DecayKnownTargetEffectAndGrowthRate).Name, "New", "DesignFire", new { id = PhaseType.DecayKnownTargetEffectAndGrowthRate }, null)</li>
        </ul>
    </div>

    <div id="xaxis" class="hidden" data-chart="@Model.XAxis"></div>
    <div id="yaxis" class="hidden" data-chart="@Model.YAxis"></div>
    
    @Html.ActionLink("Clear", "ClearTable", "DesignFire", null, new { @class = "btn btn-warning" })
    <button class="btn btn-danger" type="button" style="display: inline">Export</button>

</div>

@*<div id="myfirstchart" style="height: 250px; margin-top: 60px"></div>*@
<div id="myDiv" style="width: 480px; height: 400px;"></div>

<style>
    div.inline {
        margin-top: 30px;
    }

    table {
        padding: 20px;
    }

        table tr {
            ;
        }

    #divtable {
        height: 500px;
        border-bottom: 1px solid gray;
        border-top: 1px solid gray;
    }
</style>

@section scripts {
    @*<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>*@
    <script src="~/lib/plotly.js-1.21.2/dist/plotly.min.js"></script>
    <script>

        $(document).ready(function () {


            $(function() {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetValues")",
                    success: function(result) {

                        var test = JSON.parse(result);
                        //var test2 = "1, 2, 3, 4";
                        //var test = [1, 2, 3, 4];

                        var trace1 = {
                            //x: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 200],
                            x: test,
                            y: [0, 2, 3, 4, 10, 50, 65, 125, 80, 45, 215],
                            fill: 'tozeroy',
                            type: 'scatter'
                        };

                        var data = [trace1];

                        Plotly.newPlot('myDiv', data);

                        //confirm(result);
                    }
                });
            });

            //var trace1 = {
            //    x: xAxisData,
            //    y: yAxisData,
            //    fill: 'tozeroy',
            //    type: 'scatter'
            //};

            //var data = [trace1];

            //Plotly.newPlot('myDiv', data);

            //var datachart = $("#dataforchart").attr("data-chart");

            //var jsondata = JSON.parse(datachart);

            //new Morris.Area({

            //    // ID of the element in which to draw the chart.
            //    element: 'myfirstchart',

            //    // Chart data records -- each entry in this array corresponds to a point on
            //    data: jsondata,

            //    // Array containing colors for the series lines/points.
            //    lineColors: ["#AB0E0E"],

            //    // Set to false to skip time/date parsing for X values, instead treating them as an equally-spaced series.
            //    parseTime: false,

            //    // The name of the data record attribute that contains x-values.
            //    xkey: "Time",

            //    // A list of names of data record attributes that contain y-values.
            //    ykeys: ["Effect"],
            //    units: " kW",

            //    // Labels for the ykeys -- will be displayed when you hover over the
            //    // chart.
            //    labels: ["Effect"]
            //});

            //$("#createchart").on("click", function() {

            //});
        });


    </script>

}

